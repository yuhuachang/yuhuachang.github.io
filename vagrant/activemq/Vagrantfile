# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  $script = <<-SHELL
    sudo yum -y update
    sudo yum install -y java-1.8.0-openjdk
    sudo yum install -y wget

    echo "JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")" | sudo tee -a /etc/profile
    source /etc/profile

    sudo useradd activemq
    sudo chsh -s /sbin/nologin activemq

    cd
    wget http://ftp.twaren.net/Unix/Web/apache/activemq/5.15.3/apache-activemq-5.15.3-bin.tar.gz
    sudo tar -zxvf apache-activemq-5.15.3-bin.tar.gz -C /opt
    sudo ln -s /opt/apache-activemq-5.15.3 /opt/activemq
    sudo chown -R activemq:activemq /opt/apache-activemq-5.15.3

    touch activemq.service
    echo "[Unit]" >> activemq.service
    echo "Description=Apache ActiveMQ" >> activemq.service
    echo "After=network.target" >> activemq.service
    echo "[Service]" >> activemq.service
    echo "PIDFile=/opt/activemq/data/activemq.pid" >> activemq.service
    echo "ExecStart=/opt/activemq/bin/activemq start" >> activemq.service
    echo "ExecStop=/opt/activemq/bin/activemq stop" >> activemq.service
    echo "User=activemq" >> activemq.service
    echo "Group=activemq" >> activemq.service
    echo "[Install]" >> activemq.service
    echo "WantedBy=multi-user.target" >> activemq.service
    sudo mv activemq.service /usr/lib/systemd/system/activemq.service

    sudo systemctl enable activemq.service
    sudo systemctl start activemq.service
    sudo systemctl status activemq.service

  SHELL
  config.vm.provision "shell", inline: $script, privileged: false
end
